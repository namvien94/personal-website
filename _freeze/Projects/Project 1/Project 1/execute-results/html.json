{
  "hash": "bfe941a6bd95c3b2b26168977356759e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Project 1 - Saciva\"\nformat: html\npython:\n  python-path: /Users/namvien/.virtualenvs/r-reticulate/bin/python\n---\n\n\n## Summary\n\n**Introduction:**\nThis project aims to create an intuitive clustering-based platform to help international students in the U.S. find suitable housing, roommates, and local connections. By analyzing geographic data and integrating cost of living, safety, and climate profiles, the goal is to replace traditional filters with a machine-learning approach that ensures broader, more efficient connections.\n\n---\n\n**Process**\n\n- **Data Understanding and Preparation:**\n  - Merged multiple datasets: geographic coordinates, cost of living, income, and campus safety metrics.\n  - Conducted exploratory data analysis (EDA) to clean, visualize, and understand data patterns.\n  - Calculated seasonal climate metrics and normalized cost indices for accurate comparisons.\n\n- **Clustering and Modeling:**\n  - Applied clustering algorithms (DBSCAN, Mean Shift, Agglomerative) to group universities based on proximity.\n  - Optimized clustering parameters using metrics like Silhouette Score for model evaluation.\n  - Selected DBSCAN as the final clustering model due to its highest Silhouette Score (0.868).\n\n- **Profiling and Visualization:**\n  - Created detailed cluster profiles, analyzing cost of living, safety scores, and climate characteristics.\n  - Generated interactive maps and data visualizations (e.g., heatmaps and boxplots) to enhance understanding.\n\n---\n\n**Outcome** \n\n- Successfully created 294 meaningful clusters with distinct profiles based on geographic and socioeconomic factors.\n- Demonstrated the feasibility of clustering as a robust alternative to traditional filtering methods.\n- Delivered a scalable framework for streamlining housing and networking for international students, offering insights into cost, climate, and safety within commuting zones.  \n\n## Project Outputs\n\n::: {#ae3bcef7 .cell execution_count=1}\n``` {.python .cell-code}\nimport folium\nimport pandas as pd\nimport numpy as np\nfrom folium.plugins import MarkerCluster\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load datasets\nclusters_df = pd.read_csv('latitude_longitude_with_clusters.csv')\ncity_data = pd.read_csv('final_merged_data_with_weather.csv')\n\n# Function to find nearest city data\ndef find_nearest_city(lat, lon, city_df):\n    distances = ((city_df['latitude'] - lat)**2 + (city_df['longitude'] - lon)**2)**0.5\n    return city_df.iloc[distances.idxmin()]\n\n# Calculate seasonal metrics\nfor season in ['winter', 'spring', 'summer', 'fall']:\n    if season == 'winter':\n        months = [12, 1, 2]\n    elif season == 'spring':\n        months = [3, 4, 5]\n    elif season == 'summer':\n        months = [6, 7, 8]\n    else:  # fall\n        months = [9, 10, 11]\n\n    # Temperature\n    temp_cols = [f'temp_month_{m}' for m in months]\n    city_data[f'{season}_temp'] = city_data[temp_cols].mean(axis=1)\n\n    # Precipitation\n    precip_cols = [f'precip_month_{m}' for m in months]\n    city_data[f'{season}_precip'] = city_data[precip_cols].mean(axis=1)\n\n# Create map\nm = folium.Map(location=[37.5, -98.0], zoom_start=5)\nmarker_cluster = MarkerCluster().add_to(m)\n\n# Add markers with data\nfor _, uni in clusters_df.iterrows():\n    city_data_point = find_nearest_city(uni['LATITUDE'], uni['LONGITUDE'], city_data)\n\n    adjusted_cost = (city_data_point['Cost of Living Index'] / 100) * 77280\n    cost_of_food = adjusted_cost*.161\n    cost_of_housing = adjusted_cost*.232\n    cost_of_utils = adjusted_cost*.101\n    cost_of_transportation = adjusted_cost*.186\n    cost_of_healthcare = adjusted_cost*.096\n\n    popup_content = f\"\"\"\n    <div style='width: 300px'>\n        <h4>Cluster {uni['Clusters']}</h4>\n        <b>Location:</b> {city_data_point['City']}, {city_data_point['State']}<br>\n        <b>Economic Profile:</b><br>\n        Cost of Living Index: {city_data_point['Cost of Living Index']:.1f}<br>\n        Adjusted Cost of Living per Year(77,280 base): ${adjusted_cost:,.2f}<br>\n        Average Food Expenses: ${cost_of_food:,.2f}<br>\n        Average Housing Expenses: ${cost_of_housing:,.2f}<br>\n        Average Utilities Expenses: ${cost_of_utils:,.2f}<br>\n        Average Transportation Expenses: ${cost_of_transportation:,.2f}<br>\n        Average Healthcare Expenses: ${cost_of_healthcare:,.2f}<br>\n        Average Income: ${city_data_point['Average Income']:,.0f}<br>\n        <b>Campus Safety:</b><br>\n        Reported Crimes: {city_data_point['total_crime']}<br>\n        <b>Climate:</b><br>\n        <i>Temperature (°C):</i><br>\n        Winter: {city_data_point['winter_temp']:.1f}<br>\n        Spring: {city_data_point['spring_temp']:.1f}<br>\n        Summer: {city_data_point['summer_temp']:.1f}<br>\n        Fall: {city_data_point['fall_temp']:.1f}<br>\n        <i>Precipitation (mm):</i><br>\n        Winter: {city_data_point['winter_precip']:.1f}<br>\n        Spring: {city_data_point['spring_precip']:.1f}<br>\n        Summer: {city_data_point['summer_precip']:.1f}<br>\n        Fall: {city_data_point['fall_precip']:.1f}\n    </div>\n    \"\"\"\n\n    # Color based on crime reports\n    if city_data_point['total_crime'] < 5:\n        color = 'green'  # safe campus\n    elif city_data_point['total_crime'] > 10:\n        color = 'red'    # high crime\n    else:\n        color = 'orange' # moderate\n\n    folium.Marker(\n        location=[uni['LATITUDE'], uni['LONGITUDE']],\n        popup=popup_content,\n        icon=folium.Icon(color=color)\n    ).add_to(marker_cluster)\n\n# Create visualization plots\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(9, 7))\n\n# Calculate cluster statistics for plotting\ncluster_stats = {}\nfor cluster_id in clusters_df['Clusters'].unique():\n    cluster_unis = clusters_df[clusters_df['Clusters'] == cluster_id]\n    cluster_data = pd.DataFrame([find_nearest_city(row['LATITUDE'], row['LONGITUDE'], city_data)\n                                for _, row in cluster_unis.iterrows()])\n\n    cluster_stats[cluster_id] = {\n        'avg_cost': cluster_data['Cost of Living Index'].mean(),\n        'avg_income': cluster_data['Average Income'].mean(),\n        'avg_crime': cluster_data['total_crime'].mean(),\n        'winter_temp': cluster_data['winter_temp'].mean(),\n        'spring_temp': cluster_data['spring_temp'].mean(),\n        'summer_temp': cluster_data['summer_temp'].mean(),\n        'fall_temp': cluster_data['fall_temp'].mean(),\n        'winter_precip': cluster_data['winter_precip'].mean(),\n        'spring_precip': cluster_data['spring_precip'].mean(),\n        'summer_precip': cluster_data['summer_precip'].mean(),\n        'fall_precip': cluster_data['fall_precip'].mean()\n    }\n\ncluster_df = pd.DataFrame(cluster_stats).T\n\n# 1. Seasonal Temperature Distribution\n# Rename the columns for clearer plot labels\ntemp_data = cluster_df[['winter_temp', 'spring_temp', 'summer_temp', 'fall_temp']].rename(\n    columns={\n        'winter_temp': 'Winter',\n        'spring_temp': 'Spring',\n        'summer_temp': 'Summer',\n        'fall_temp': 'Fall'\n    }\n)\nsns.boxplot(data=temp_data, ax=ax1)\nax1.set_title('Seasonal Temperature Distribution by Cluster')\nax1.set_ylabel('Temperature (°C)')\n\n# 2. Seasonal Precipitation Distribution\n# Rename the columns for clearer plot labels\nprecip_data = cluster_df[['winter_precip', 'spring_precip', 'summer_precip', 'fall_precip']].rename(\n    columns={\n        'winter_precip': 'Winter',\n        'spring_precip': 'Spring',\n        'summer_precip': 'Summer',\n        'fall_precip': 'Fall'\n    }\n)\nsns.boxplot(data=precip_data, ax=ax2)\nax2.set_title('Seasonal Precipitation Distribution by Cluster')\nax2.set_ylabel('Precipitation (mm)')\n\n# 3. Cost vs Safety Scatter\nsns.scatterplot(data=cluster_df, x='avg_cost', y='avg_crime', ax=ax3)\nax3.set_title('Average Cost of Living vs Campus Crime')\nax3.set_xlabel('Cost of Living Index')\nax3.set_ylabel('Average Reported Crimes')\n\n# 4. Cost vs Income Distribution\nsns.scatterplot(data=cluster_df, x='avg_cost', y='avg_income', ax=ax4)\nax4.set_title('Cost of Living vs Average Income')\nax4.set_xlabel('Cost of Living Index')\nax4.set_ylabel('Average Income ($)')\n\nplt.tight_layout()\nplt.show()\n\n# m.save('cluster_visualization.html')\n\n# After calculating cluster_stats, but before the print statements, add this code to create the profiles dictionary:\n\nprofiles = {}\nfor cluster_id in clusters_df['Clusters'].unique():\n    cluster_unis = clusters_df[clusters_df['Clusters'] == cluster_id]\n    cluster_data = pd.DataFrame([find_nearest_city(row['LATITUDE'], row['LONGITUDE'], city_data)\n                                for _, row in cluster_unis.iterrows()])\n\n    profiles[cluster_id] = {\n        'size': {\n            'num_universities': len(cluster_unis),\n            'major_cities': ', '.join(cluster_data['City'].unique()[:3])  # List up to 3 major cities\n        },\n        'economics': {\n            'avg_cost_index': cluster_data['Cost of Living Index'].mean(),\n            'cost_range': (cluster_data['Cost of Living Index'].min(),\n                          cluster_data['Cost of Living Index'].max()),\n            'avg_income': cluster_data['Average Income'].mean(),\n            'income_range': (cluster_data['Average Income'].min(),\n                           cluster_data['Average Income'].max())\n        },\n        'safety': {\n            'avg_reported_crimes': cluster_data['total_crime'].mean(),\n            'total_reported_crimes': cluster_data['total_crime'].sum(),\n            'num_safe_campuses': len(cluster_data[cluster_data['total_crime'] < 5]),\n            'num_high_crime_campuses': len(cluster_data[cluster_data['total_crime'] > 10])\n        },\n        'climate': {\n            'temperature': {\n                'winter': cluster_data['winter_temp'].mean(),\n                'spring': cluster_data['spring_temp'].mean(),\n                'summer': cluster_data['summer_temp'].mean(),\n                'fall': cluster_data['fall_temp'].mean()\n            },\n            'precipitation': {\n                'winter': cluster_data['winter_precip'].mean(),\n                'spring': cluster_data['spring_precip'].mean(),\n                'summer': cluster_data['summer_precip'].mean(),\n                'fall': cluster_data['fall_precip'].mean(),\n                'annual': cluster_data[['winter_precip', 'spring_precip',\n                                      'summer_precip', 'fall_precip']].mean(axis=1).mean()\n            }\n        }\n    }\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/namvien/.virtualenvs/r-reticulate/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Project 1_files/figure-html/cell-2-output-2.png){width=861 height=662}\n:::\n:::\n\n\n## Interactive Map\n\n::: {#b5c91730 .cell execution_count=2}\n``` {.python .cell-code}\nimport folium\nm\nm.save('map_output.html')\n```\n:::\n\n\nBelow is the **interactive clustering map based on U.S. Universities**:\n\n<iframe src=\"map_output.html\" width=\"100%\" height=\"760\" style=\"border:none;\"></iframe>\n\n## Supporting Documents\n\n[Group Presentation](Saciva Clustering 1B Final Project Presentation.pdf){target=\"_blank\"}\n\n[Download or view the PDF](saciva.pdf){target=\"_blank\"}\n\n",
    "supporting": [
      "Project 1_files"
    ],
    "filters": [],
    "includes": {}
  }
}